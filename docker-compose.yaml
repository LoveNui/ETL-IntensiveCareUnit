version: "3.7"

services:

    # configuration manager for NiFi
  zookeeper:
      hostname: myzookeeper
      container_name: zookeeper_container_persistent
      image: 'bitnami/zookeeper:3.7.1'  # latest image as of 2021-11-09.
      restart: on-failure
      environment:
          - ALLOW_ANONYMOUS_LOGIN=yes
      networks:
          - my_persistent_network

  kafka:
    image: fjardim/kafka
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    volumes:
      - ./data/kafka:/kafka/kafka-logs-kafka
      - ./nifi/scripts:/tmp/scripts
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    deploy:
      resources:
        limits:
          memory: 500m
    networks:
        - my_persistent_network

# version control for nifi flows
  registry:
      hostname: myregistry
      container_name: registry_container_persistent
      image: 'apache/nifi-registry:1.17.0'  # latest image as of 2021-11-09.
      restart: on-failure
      ports:
          - "18080:18080"
      environment:
          - LOG_LEVEL=INFO
          - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
          - NIFI_REGISTRY_FLOW_PROVIDER=file
          - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
      volumes:
          - ./nifi_registry/database:/opt/nifi-registry/nifi-registry-current/database
          - ./nifi_registry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
          - ./nifi/scripts:/tmp/scripts
      networks:
          - my_persistent_network

  nifi:
    image: apache/nifi:1.17.0
    container_name: nifi
    restart: on-failure
    environment:
          - NIFI_WEB_HTTP_PORT=8080
          - NIFI_CLUSTER_IS_NODE=true
          - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
          - NIFI_ZK_CONNECT_STRING=myzookeeper:2181
          - NIFI_ELECTION_MAX_WAIT=30 sec
          - NIFI_SENSITIVE_PROPS_KEY='12345678901234567890A'
    ports:
      - 8091:8080
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:8091/nifi/}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 5
    volumes:
          - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
          - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
          - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
          - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
          - ./nifi/state:/opt/nifi/nifi-current/state
          - ./nifi/logs:/opt/nifi/nifi-current/logs
          - ./nifi/scripts:/tmp/scripts
          # uncomment the next line after copying the /conf directory from the container to your local directory to persist NiFi flows
          - ./nifi/conf:/opt/nifi/nifi-current/conf
    networks:
        - my_persistent_network

  postgres:
    image: koroslak/postgres:latest
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=secret123
    ports:
      - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - my_persistent_network   
        
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:4.18
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - 8090:80
    networks:
      - my_persistent_network   
  
  mongo:
    image: fjardim/mongo
    container_name: mongo
    hostname: mongo
    #restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - 27017:27017
    volumes:
      - ./data/mongo:/data
    deploy:
      resources:
        limits:
          memory: 500m
    networks:
      - my_persistent_network 

  mongo-express:
    image: fjardim/mongo-express
    container_name: mongo_express
    hostname: mongo_express
    #restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_SERVER: mongo
    deploy:
      resources:
        limits:
          memory: 200m
    networks:
      - my_persistent_network 

  metabase:
    container_name: metabase
    image: metabase/metabase:v0.34.2
    restart: always
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: metabase_admin
      MB_DB_PASS: secret123
      MB_DB_HOST: postgres
    ports:
      - 3000:3000
    # depends_on:
    #   - postgres
    networks:
      - my_persistent_network 

volumes:
  postgres:
  nifi:
  openldap:
  metabase:
  pgadmin:

networks:
  my_persistent_network:
    driver: bridge